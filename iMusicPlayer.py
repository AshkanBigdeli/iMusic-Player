# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'iMusicPlayer.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from tkinter import *
from tkinter import filedialog
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import Qt
import pygame, os, eyed3
from pygame import mixer
from pathlib import Path
from PyQt5.QtWidgets import QApplication, QWidget, QInputDialog, QLineEdit, QFileDialog, QFrame
from mutagen.mp3 import MP3
from mutagen.id3 import ID3,APIC
from PyQt5.QtGui import QPixmap
from PyQt5.QtMultimedia import QAudioDeviceInfo, QAudioOutput
from PyQt5.QtMultimedia import QAudioFormat, QAudioBuffer, QAudioInput



class Ui_MainWindow(QWidget):
    def setupUi(self, MainWindow):
        #pygame.init()
        #Main Window
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(550, 900)
        #MainWindow.setStyleSheet("background-image: url(main-bg.png);")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        
        #Label Art Work
        self.label_ArtWork = QtWidgets.QLabel(self.centralwidget)
        self.label_ArtWork.setMinimumSize(QtCore.QSize(0, 300))
        self.label_ArtWork.setAlignment(QtCore.Qt.AlignHCenter | QtCore.Qt.AlignVCenter) 
        default_artwork =  QPixmap("default-artwork.png").scaled(400,400)
        self.label_ArtWork.setPixmap(default_artwork)
        self.label_ArtWork.setScaledContents(True)
        #pixmap = QPixmap(str(default_artwork)).sc aled(300, 300)
        self.label_ArtWork.setPixmap(default_artwork)
                    
        self.label_ArtWork.setObjectName("label_ArtWork")
        self.verticalLayout.addWidget(self.label_ArtWork)
        spacerItem = QtWidgets.QSpacerItem(20, 10, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        self.verticalLayout.addItem(spacerItem)
        
        #Label Current Song
        self.label_CurrentSong = QtWidgets.QLabel(self.centralwidget)
        self.label_CurrentSong.setAlignment(QtCore.Qt.AlignCenter)
        self.label_CurrentSong.setObjectName("label_CurrentSong")
        self.verticalLayout.addWidget(self.label_CurrentSong)
        self.verticalLayout_2.addLayout(self.verticalLayout)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        
        #Label Time Forward
        self.label_TimeForward = QtWidgets.QLabel(self.centralwidget)
        self.label_TimeForward.setObjectName("label_TimeForward")
        self.horizontalLayout_2.addWidget(self.label_TimeForward)
        spacerItem1 = QtWidgets.QSpacerItem(5, 5, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem1)
        
        #Slider Timeline
        self.slider_TimeLine = QtWidgets.QSlider(self.centralwidget)
        self.slider_TimeLine.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.slider_TimeLine.setOrientation(QtCore.Qt.Horizontal)
        self.slider_TimeLine.setObjectName("slider_TimeLine")
        self.slider_TimeLine.valueChanged.connect(self.set_position)
        self.horizontalLayout_2.addWidget(self.slider_TimeLine)
        spacerItem2 = QtWidgets.QSpacerItem(5, 5, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem2)
        
        #Label Time Remaining
        self.label_TimeRemaining = QtWidgets.QLabel(self.centralwidget)
        self.label_TimeRemaining.setObjectName("label_TimeRemaining")
        self.horizontalLayout_2.addWidget(self.label_TimeRemaining)
        self.verticalLayout_2.addLayout(self.horizontalLayout_2)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        
        #Button Previous
        self.button_Previous = QtWidgets.QPushButton(self.centralwidget)
        self.button_Previous.setObjectName("button_Previous")
        self.horizontalLayout.addWidget(self.button_Previous)
        spacerItem3 = QtWidgets.QSpacerItem(5, 5, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem3)
    
        #Button Play / Pause
        self.button_PlayPause = QtWidgets.QPushButton(self.centralwidget)
        self.button_PlayPause.setObjectName("button_PlayPause")
        self.horizontalLayout.addWidget(self.button_PlayPause)
        spacerItem4 = QtWidgets.QSpacerItem(5, 5, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem4)
        self.button_PlayPause.clicked.connect(self.Play_Pause)
    
        #Button Stop
        self.button_Stop = QtWidgets.QPushButton(self.centralwidget)
        self.button_Stop.setObjectName("button_Stop")
        self.button_Stop.clicked.connect(self.stop)
        self.horizontalLayout.addWidget(self.button_Stop)
        spacerItem5 = QtWidgets.QSpacerItem(5, 5, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem5)
    
        #Button Next
        self.button_Next = QtWidgets.QPushButton(self.centralwidget)
        self.button_Next.setObjectName("button_Next")
        self.horizontalLayout.addWidget(self.button_Next)
        spacerItem6 = QtWidgets.QSpacerItem(5, 5, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem6)
    
        #Button Open
        self.button_Open = QtWidgets.QPushButton(self.centralwidget)
        self.button_Open.setObjectName("button_Open")
        self.horizontalLayout.addWidget(self.button_Open)
        spacerItem7 = QtWidgets.QSpacerItem(5, 5, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem7)
        self.button_Open.clicked.connect(self.openFileNameDialog)
    
        #Dial Volume
        self.dial_Volume = QtWidgets.QDial(self.centralwidget)
        self.dial_Volume.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.dial_Volume.setMaximum(100)
        self.dial_Volume.setObjectName("dial_Volume")
        # get the default audio device
        audio_device = QAudioDeviceInfo.defaultOutputDevice()

        # create a QAudioOutput object with the default device
        audio_output = QAudioOutput(audio_device, QAudioFormat())

        # get the volume from the QAudioOutput object
        current_value = audio_output.volume()
        self.dial_Volume.setValue(int(current_value))
        self.dial_Volume.valueChanged.connect(self.set_volume)
        self.dial_Volume.setFixedSize(80,80)
        self.horizontalLayout.addWidget(self.dial_Volume)
        
    
        self.verticalLayout_2.addLayout(self.horizontalLayout)
        self.verticalLayout_3 = QtWidgets.QVBoxLayout()
        self.verticalLayout_3.setObjectName("verticalLayout_3")
    
        #Set Buttons Size
        self.button_Previous.setFixedSize(80, 50)
        self.button_PlayPause.setFixedSize(80, 50)
        self.button_Stop.setFixedSize(80, 50)
        self.button_Next.setFixedSize(80, 50)
        self.button_Open.setFixedSize(80, 50)
        
        #List Widget
        self.listWidget_PlayList = QtWidgets.QListWidget(self.centralwidget)
        self.listWidget_PlayList.setObjectName("listWidget_PlayList")
        self.listWidget_PlayList.itemDoubleClicked.connect(self.Play_Music)
        self.verticalLayout_3.addWidget(self.listWidget_PlayList)
        self.verticalLayout_2.addLayout(self.verticalLayout_3)
        MainWindow.setCentralWidget(self.centralwidget)
        
        #Menu Bar
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 550, 24))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionNew = QtWidgets.QAction(MainWindow)
        self.actionNew.setObjectName("actionNew")
        self.actionOpen_File = QtWidgets.QAction(MainWindow)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("open.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionOpen_File.setIcon(icon)
        self.actionOpen_File.setObjectName("actionOpen_File")
        self.actionClose = QtWidgets.QAction(MainWindow)
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("close.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionClose.setIcon(icon1)
        self.actionClose.setObjectName("actionClose")
        self.menuFile.addAction(self.actionOpen_File)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionClose)
        self.menubar.addAction(self.menuFile.menuAction())
        
        #Mixer
        mixer.init()

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "iMusic Player"))
        #self.label_ArtWork.setText(_translate("MainWindow", "Artwork - Photo"))
        self.label_CurrentSong.setText(_translate("MainWindow", ""))
        self.label_TimeForward.setText(_translate("MainWindow", "Time Forward"))
        self.label_TimeRemaining.setText(_translate("MainWindow", "Time Remaining"))
        self.button_Previous.setText(_translate("MainWindow", "Previous"))
        self.button_PlayPause.setText(_translate("MainWindow", "Play"))
        self.button_Stop.setText(_translate("MainWindow", "Stop"))
        self.button_Next.setText(_translate("MainWindow", "Next"))
        self.button_Open.setText(_translate("MainWindow", "Open"))
        self.menuFile.setTitle(_translate("MainWindow", "File"))
        self.actionNew.setText(_translate("MainWindow", "New"))
        self.actionOpen_File.setText(_translate("MainWindow", "Open File"))
        self.actionClose.setText(_translate("MainWindow", "Close"))
    
    def Play_Music(self):
        self.button_PlayPause.setText("Pause")
        global Music_Name
        Music_Name= self.listWidget_PlayList.currentItem().text()
        self.song_tag(Music_Name)
        mixer.music.load(Music_Name)
        mixer.music.play()
        music_file = mixer.Sound(Music_Name)
        songLength = music_file.get_length()
        self.TrackPlay()
    
    def song_tag(self,Music_Name):
        song_tag = eyed3.load(Music_Name)
        id3 = ID3(Music_Name)
        artwork = id3.get('APIC:')
        pixmap = QPixmap()
        pixmap.loadFromData(artwork.data)
        self.label_ArtWork.setPixmap(pixmap)
        self.label_ArtWork.setAlignment(Qt.AlignCenter)
        self.label_ArtWork.setScaledContents(False)
        
        # Scale down the pixmap to fit inside the QLabel while preserving aspect ratio
        scaled_pixmap = pixmap.scaled(400, 400, Qt.KeepAspectRatio, Qt.SmoothTransformation)

        # Set the scaled pixmap as the new pixmap for the QLabel
        self.label_ArtWork.setPixmap(scaled_pixmap)

        # Center the pixmap inside the QLabel
        self.label_ArtWork.setAlignment(Qt.AlignCenter)
        
        #self.label_ArtWork.parent().layout().addWidget(self.label_ArtWork, 0, Qt.AlignCenter)


        self.label_CurrentSong.setText(song_tag.tag.title +' by '+ song_tag.tag.artist)
    
    def stop(self):
        mixer.music.stop()
        self.button_PlayPause.setText("Pause")
    
    def Play_Pause(self):
        if self.button_PlayPause.text() == "Play":
            mixer.music.unpause()
            self.button_PlayPause.setText("Pause")
            
        elif self.button_PlayPause.text() == "Pause":
            mixer.music.pause()
            self.button_PlayPause.setText("Play")

    def set_volume(self):
        mixer.music.set_volume(self.dial_Volume.value()/100)
        self.dial_Volume.setNotchesVisible(True)
        self.dial_Volume.setToolTip(str(self.dial_Volume.value()))
    
    def set_position(self, value):
        current_position = mixer.music.get_pos() / 1000
        new_position = current_position + value
        mixer.music.rewind()
        mixer.music.play(start=new_position)
        
    def TrackPlay(self):
        if mixer.music.get_busy():
            current = mixer.music.get_pos() #.get_pos() returns integer in milliseconds

    def openFileNameDialog(self):
        options = QFileDialog.Options()
        #options |= QFileDialog.DontUseNativeDialog
        fileNames, _ = QFileDialog.getOpenFileNames(self,"QFileDialog.getOpenFileNames()", "","All Files (*);;MP3 Files (*.mp3)", options=options)
        if fileNames:
            for fileName in fileNames:
                self.listWidget_PlayList.addItem(fileName)

    def Add_Music(self):
        Playlist = self.listWidget_PlayList()
        path = filedialog.askdirectory()
        if path:
            os.chdir(path)
            songs = os.listdir(path)
            for song in songs:
                if song.endswith(".mp3"):
                    full_path = os.path.join(path, song)
                    Playlist.insert(END, full_path)

#import images_source_rc



if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
